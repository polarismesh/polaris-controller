---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: polaris-sidecar-injector
  namespace: polaris-system
  labels:
    app: sidecar-injector
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: sidecar-injector

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: polaris-sidecar-injector
  namespace: polaris-system
  labels:
    app: sidecar-injector
data:
  values: |-
    {"clusterResources":true,"global":{"arch":{"amd64":2,"ppc64le":2,"s390x":2},"configNamespace":"polaris-system","configValidation":"false","controlPlaneSecurityEnabled":true,"defaultNodeSelector":{},"defaultPodDisruptionBudget":{"enabled":true},"defaultResources":{"requests":{"cpu":"10m"}},"disablePolicyChecks":true,"enableHelmTest":false,"enableTracing":true,"hub":"istio","imagePullPolicy":"Always","imagePullSecrets":[],"istioNamespace":"polaris-system","k8sIngress":{"enableHttps":false,"enabled":false,"gatewayName":"ingressgateway"},"localityLbSetting":{"enabled":true},"logAsJson":false,"logging":{"level":"default:info"},"meshExpansion":{"enabled":false,"useILB":false},"meshID":"","meshNetworks":{},"mtls":{"enabled":false},"multiCluster":{"enabled":false},"oneNamespace":false,"outboundTrafficPolicy":{"mode":"ALLOW_ANY"},"policyCheckFailOpen":false,"policyNamespace":"polaris-system","priorityClassName":"","prometheusNamespace":"polaris-system","proxy":{"accessLogEncoding":"TEXT","accessLogFile":"","accessLogFormat":"","autoInject":"enabled","clusterDomain":"cluster.local","componentLogLevel":"misc:error","concurrency":2,"dnsRefreshRate":"300s","enableCoreDump":false,"envoyAccessLogService":{"enabled":false,"host":null,"port":null},"envoyMetricsService":{"enabled":false,"host":null,"port":null},"envoyStatsd":{"enabled":false,"host":null,"port":null},"excludeIPRanges":"","excludeInboundPorts":"","excludeOutboundPorts":"","image":"proxyv2","includeIPRanges":"*","includeInboundPorts":"*","kubevirtInterfaces":"","logLevel":"warning","privileged":false,"protocolDetectionTimeout":"10ms","readinessFailureThreshold":30,"readinessInitialDelaySeconds":1,"readinessPeriodSeconds":2,"resources":{"limits":{"cpu":"2000m","memory":"1024Mi"},"requests":{"cpu":"100m","memory":"128Mi"}},"statusPort":15020,"tag":"1.7.0","tracer":"zipkin"},"proxy_init":{"image":"proxyv2","resources":{"limits":{"cpu":"100m","memory":"50Mi"},"requests":{"cpu":"10m","memory":"10Mi"}}},"sds":{"enabled":false,"udsPath":""},"tag":"1.5.8","telemetryNamespace":"polaris-system","tracer":{"datadog":{"address":"$(HOST_IP):8126"},"lightstep":{"accessToken":"","address":"","cacertPath":"","secure":true},"zipkin":{"address":""}},"trustDomain":"","useMCP":true,"xdsApiVersion":"v3"},"istio_cni":{"enabled":false},"sidecarInjectorWebhook":{"alwaysInjectSelector":[],"enableAccessLog":false,"enableNamespacesByDefault":false,"image":"sidecar_injector","injectLabel":"istio-injection","neverInjectSelector":[],"nodeSelector":{},"podAntiAffinityLabelSelector":[],"podAntiAffinityTermLabelSelector":[],"replicaCount":2,"rewriteAppHTTPProbe":false,"rollingMaxSurge":"100%","rollingMaxUnavailable":"25%","selfSigned":true,"tolerations":[]},"version":""}

  dns-config: |-
    policy: enabled
    alwaysInjectSelector:
      []

    neverInjectSelector:
      [{"matchLabels":{"polarismesh.cn/inject":"disabled"}}]

    template: |
      containers:
      - image: polarismesh/polaris-sidecar:#SIDECAR_VERSION#
        name: polaris-sidecar
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
            drop:
            - ALL
          privileged: true
          readOnlyRootFilesystem: false
          runAsGroup: 1337
          runAsNonRoot: false
          runAsUser: 1337
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 50Mi
        volumeMounts:
          - mountPath: /root/polaris
            defaultMode: 777
            name: polaris-dir
          - mountPath: /root/log
            defaultMode: 777
            name: polaris-log
      initContainers:
      - name: polaris-sidecar-init
        image: polarismesh/polaris-sidecar-init:#CONTROLLER_VERSION#
        imagePullPolicy: Always
        command: ["./start.sh"]
        env:
        - name: RUN_MODE
          value: DNS
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
          - mountPath: /data/polaris-client-config
            name: polaris-client-config
      volumes:
        - name: polaris-client-config
          emptyDir: {}
        - name: polaris-sidecar-iptables
          configMap:
            defaultMode: 420
            name: polaris-sidecar-iptables
        - name: polaris-dir
          emptyDir: {}
        - name: polaris-log
          emptyDir: {}

  java-agent-config: |-
    policy: enabled
    alwaysInjectSelector:
      []

    neverInjectSelector:
      [{"matchLabels":{"polarismesh.cn/inject":"disabled"}}]

    template: |
      initContainers:
      - name: polaris-javaagent-init
        image: polarismesh/polaris-javaagent-init:#JAVA_AGENT_INIT#
        imagePullPolicy: Always
        env:
          - name: JAVA_AGENT_DIR
            value: /app/lib/.polaris/java_agent
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
          - mountPath: /app/lib/.polaris/java_agent
            name: java-agent-dir
      volumes:
        - name: java-agent-dir
          emptyDir: {}

  mesh-config: |+
    policy: enabled
    alwaysInjectSelector:
      []

    neverInjectSelector:
      [{"matchLabels":{"polarismesh.cn/inject":"disabled"}}]

    template: |+
      containers:
      - name: envoy
        image: envoyproxy/envoy:#ENVOY_VERSION#
        imagePullPolicy: Always
        command: ["/usr/local/bin/envoy"]
        args: ["-c", "/etc/envoy/envoy.yaml", "--log-path", "/etc/envoy_logs/envoy.log", "--log-level", "debug"]
        resources:
        {{- if or (isset .ObjectMeta.Annotations `polarismesh.cn/proxyCPU`) (isset .ObjectMeta.Annotations `polarismesh.cn/proxyMemory`) (isset .ObjectMeta.Annotations `polarismesh.cn/proxyCPULimit`) (isset .ObjectMeta.Annotations `polarismesh.cn/proxyMemoryLimit`) }}
          {{- if or (isset .ObjectMeta.Annotations `polarismesh.cn/proxyCPU`) (isset .ObjectMeta.Annotations `polarismesh.cn/proxyMemory`) }}
            requests:
              {{ if (isset .ObjectMeta.Annotations `polarismesh.cn/proxyCPU`) -}}
              cpu: "{{ index .ObjectMeta.Annotations `polarismesh.cn/proxyCPU` }}"
              {{ end }}
              {{ if (isset .ObjectMeta.Annotations `polarismesh.cn/proxyMemory`) -}}
              memory: "{{ index .ObjectMeta.Annotations `polarismesh.cn/proxyMemory` }}"
              {{ end }}
          {{- end }}
          {{- if or (isset .ObjectMeta.Annotations `polarismesh.cn/proxyCPULimit`) (isset .ObjectMeta.Annotations `polarismesh.cn/proxyMemoryLimit`) }}
            limits:
              {{ if (isset .ObjectMeta.Annotations `polarismesh.cn/proxyCPULimit`) -}}
              cpu: "{{ index .ObjectMeta.Annotations `polarismesh.cn/proxyCPULimit` }}"
              {{ end }}
              {{ if (isset .ObjectMeta.Annotations `polarismesh.cn/proxyMemoryLimit`) -}}
              memory: "{{ index .ObjectMeta.Annotations `polarismesh.cn/proxyMemoryLimit` }}"
              {{ end }}
          {{- end }}
        {{- else }}
          {{- if .Values.global.proxy.resources }}
            {{ toYaml .Values.global.proxy.resources | indent 6 }}
          {{- end }}
        {{- end }}
        env:
        - name: ENVOY_UID
          value: "1337"
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-bootstrap
          readOnly: false
        - mountPath: /etc/envoy_logs
          name: envoy-logs
          readOnly: false
        - mountPath: /tmp/polaris-sidecar
          defaultMode: 777
          name: polaris-socket
      - image: polarismesh/polaris-sidecar:#SIDECAR_VERSION#
        name: polaris-sidecar
        securityContext:
          runAsUser: 1337
          runAsGroup: 1337
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 50Mi
        volumeMounts:
          - mountPath: /tmp/polaris-sidecar
            defaultMode: 777
            name: polaris-socket
          {{ if ( openTlsMode .ObjectMeta.Annotations `polarismesh.cn/tls-mode` ) }}
          - name: root-ca
            mountPath: /etc/polaris-sidecar/certs
          {{ end }}
      initContainers:
      - name: polaris-bootstrap-writer
        image: polarismesh/polaris-envoy-bootstrap-generator:#CONTROLLER_VERSION#
        imagePullPolicy: Always
        env:
        - name: METADATA
          value: {{index .ObjectMeta.Annotations `sidecar.polarismesh.cn/envoyMetadata`}}
        {{if ( openTlsMode .ObjectMeta.Annotations `polarismesh.cn/tls-mode` ) }}
        - name: TLS_MODE
          value: {{index .ObjectMeta.Annotations `polarismesh.cn/tls-mode`}}
        {{end}}
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POLARIS_SERVER_URL
          value: {{.ProxyConfig.ProxyMetadata.serverAddress}}:15010
        - name: POLARIS_SERVER_HOST
          value: {{.ProxyConfig.ProxyMetadata.serverAddress}}
        - name: POLARIS_SERVER_PORT
          value: 15010
        - name: CLUSTER_NAME
          value: {{.ProxyConfig.ProxyMetadata.clusterName}}
        - name: OPEN_DEMAND
          value: {{.ProxyConfig.ProxyMetadata.openDemand}}
        volumeMounts:
          - mountPath: /var/lib/data
            name: envoy-bootstrap
          - mountPath: /data/polaris-client-config
            name: polaris-client-config
      - name: polaris-sidecar-init
        image: polarismesh/polaris-sidecar-init:#CONTROLLER_VERSION#
        imagePullPolicy: Always
        command: ["./start.sh"]
        env:
        - name: RUN_MODE
          value: MESH
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
          - mountPath: /data/polaris-client-config
            name: polaris-client-config
      volumes:
        - name: sds
          emptyDir: {}
        {{ if ( openTlsMode .ObjectMeta.Annotations `polarismesh.cn/tls-mode` ) }}
        - name: root-ca
          secret: 
            secretName: polaris-sidecar-secret
            items:
            - key: root-cert
              path: rootca.pem
        {{ end }}
        - name: polaris-client-config
          emptyDir: {}
        - name: envoy-bootstrap
          emptyDir: {}
        - name: envoy-logs
          emptyDir: {}
        - name: polaris-dir
          emptyDir: {}
        - name: polaris-log
          emptyDir: {}
        - name: polaris-socket
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: polaris-sidecar-injector
  namespace: polaris-system
  labels:
    app: sidecar-injector
spec:
  ports:
    - port: 443
      targetPort: 9443
  selector:
    app: sidecar-injector
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: polaris-sidecar-injector
  labels:
    app: sidecar-injector
webhooks:
  - name: polaris.tencent.com
    clientConfig:
      service:
        name: polaris-sidecar-injector
        namespace: polaris-system
        path: "/inject"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZpVENDQTNHZ0F3SUJBZ0lVSUJGZmZMeE84K2RNSTNrd3hOcXpibGg4Zm9Vd0RRWUpLb1pJaHZjTkFRRUwKQlFBd05qRTBNRElHQTFVRUF3d3JjRzlzWVhKcGN5MXphV1JsWTJGeUxXbHVhbVZqZEc5eUxuQnZiR0Z5YVhNdApjM2x6ZEdWdExuTjJZekFnRncweU1qQTNNRFF3TXpFNU1UaGFHQTh5TVRJeE1EWXhNREF6TVRreE9Gb3dOakUwCk1ESUdBMVVFQXd3cmNHOXNZWEpwY3kxemFXUmxZMkZ5TFdsdWFtVmpkRzl5TG5CdmJHRnlhWE10YzNsemRHVnQKTG5OMll6Q0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxMWmE4NzZkQnRmQlJ1cgpaSzZpK0UzRUs4UWJFWitlaG1lNWNhaXhsakRwTlJIdHFyb2I2NGExYldTUWQxU0IvMmVxbVdiY1ZXY24vVFRQCk45WFVHN2JsNExSaWRWQktYODE3ekdDWEYra3BqbTNOekFseEdEK3lteXhJeWhYS1U5K3A3VGk5SXpORXNPNE8KSlhaQm5iOVdzWGU2eGJJN0dlUUY5WXVCdit0ekNMNVJ0ZmRiUmtMVGQ2eWF3NlZYTFdEcDFrUUU4Q1pEc0g5ZApTZmxBeUhCUitaLzVqbzBtMnQzU3hiNTVPak9YcDhVNmV3bVRmdzZ0VXE1Z3dmZXBjWGNOUWlVTXJveFl0dXkxCkxnWGVBN3MvMFdCeDcrVlFPWXlGSGlaQUI0V1dkSEk1S0JIeFlpSFA3Y2N5aWEvM0gwQ2lYVSthYnd0NHk5TDQKdmVSMHQ5ZmMvbXZXUU01aFBjT1hwdzVJZU5sUG8wZE9vZ0NNdE1qaTkwTEFFS2RMQVNhemxDT0hzdVFqNkczaQp4Nk4rdzQrYy9VTGFxR1REUGc2K0c0UDl5UUVZNXVDNDRZWWpJSGxjQlhyR0YwVFFKTEZMM3F4dnU1VitpYXF1CnMvaWZyRzllY3RyY3lLczVWM0dESGlDdE93Y29MajI1TG1oYzF4MEdvT1RmWis3VFA1NjRyM1k3cVVhcUJ3WFgKMWREak4wREFtU1k1VW1tTGhhZ205bU9xcVo4T29XY0M2clFEVUJwbW1hTTUxVEVkeVEwbHNCc0g1T0Jvalp1UgpkeUZuTXkxWHdSRjVNenRrTW9nRnZKYWhnN1hVUTJBN1NBaUhxaUlCY1AyZTZKNDdUMVNqa0s4NUpwMU1WRW5PCjZhSFZxR29wQm9tUi9BNzBTUlRLeGp2UW52UC9BZ01CQUFHamdZd3dnWWt3SFFZRFZSME9CQllFRkNMTkZlMHUKd3Z3RGRiT0VRQWwxNFMwRTRBQzhNQjhHQTFVZEl3UVlNQmFBRkNMTkZlMHV3dndEZGJPRVFBbDE0UzBFNEFDOApNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdOZ1lEVlIwUkJDOHdMWUlyY0c5c1lYSnBjeTF6YVdSbFkyRnlMV2x1CmFtVmpkRzl5TG5CdmJHRnlhWE10YzNsemRHVnRMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQWx5aXQKVjdYaHRqZTFXK3RBMUtiUUtBUi8rendiUW1RUHpRTHpRdEdqUERvbmk5VVYyK3A1OEF5YmtvVVo3cEhXb2hFcgoxUGI2WGpKVVYxNjhGb3FZMUR4OS9SRCtDeC9mOWZ1MkswTTEvc2pYTk9oVERuMHZwZ2VvMFZJOVdCcUMrK1EyCllORmZNM2ZhaDQyaXVaSTBZNldnRldJM3dGbUQ3MTBWTC8xOVhMQ0dpditUbmc0ZnRwcHhOZW9rWlI1dU1janAKM0hNeExnUkExbnFYQ2ZhT3VrRVZLbnhvQ1hoQmRySXErV1VsOUZjZ09iVGxaU0RMNEpkZTl2R1B3cFBFRS9pVgo5cHhsMkhxWWdUZEdXZjJXeWluSmhZazFXempmZzFRTEY0TnJIQ2o3alJNbDBFbXZHM0hTNDM0ME9PUURKTlptClBDVHVrODV6L2dwaml5b3RxUlorcmNXSThBbVZDdURWbkg0VHVqb2swU1RXdUlWUDM5c21DUE5kUElwUVIxblIKSnZ1L2szV0IrTmlZbU94QzJ5SjRvMWRtYnZvS2ZadGIxVVBObVRJcmxXNThlMDdmUGV4QmNwR3JSRk5yVS9kaQpJbEpMNytXVVBKQWluTC8zL0FLQm5md1ZaemtrOVlUdld0b2xZeElhRExTd3JsdEdvZjBQUkptYnI0UDdxbm56ClFDUXVlZDFsUjRaUHJnYUlnZEdHSjdac1lESlVZbS8xd2g3N3FmR3FlYlRFZmorV09JYzV2S09vcEZTY0ZXd3oKNGVZVmVMYjBZdkc0dmc3ZHhCNFArbElzaFNpdmRVUE5XMW5ZY05pcFIrNnI2Q3h0ZnIwWjZWSkFjZjdTR1FHNwpYZkNuQXdMdlJtMEs2Q1Z6WUhPTFVRR2ZVSjBEbGFEeUR3c0JOc009Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Fail
    namespaceSelector:
      matchLabels:
        polaris-injection: enabled
  # 命名空间范围自动注入，新命名格式
  - name: ns.injector.polarismesh.cn
    clientConfig:
      service:
        name: polaris-sidecar-injector
        namespace: polaris-system
        path: "/inject"
      caBundle: ""
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    admissionReviewVersions: ["v1"]
    sideEffects: "None"
    failurePolicy: Fail
    namespaceSelector:
      matchLabels:
        polarismesh.cn/inject: enabled
  # 白名单功能, 支持按pod范围按需加载
  - name: allowlist.polarismesh.cn
    clientConfig:
      service:
        name: polaris-sidecar-injector
        namespace: polaris-system
        path: "/inject"
      caBundle: ""
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    admissionReviewVersions: ["v1"]
    sideEffects: "None"
    failurePolicy: Fail
    objectSelector:
      matchLabels:
        polarismesh.cn/inject: enabled
---

